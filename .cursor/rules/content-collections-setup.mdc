---
globs: src/content/**/*,astro.config.mjs
description: "Astro content collections setup and migration from Gatsby MDX content"
---

# Content Collections Setup & Migration

## 📚 Content Collections Architecture

### Configuration Setup
```js
// src/content/config.ts
import { defineCollection, z } from 'astro:content'

const docsCollection = defineCollection({
  type: 'content',
  schema: z.object({
    title: z.string(),
    description: z.string(),
    slug: z.string().optional(),
    author: z.string(),
    date: z.date(),
    order: z.number(),
    draft: z.boolean().default(false),
    tags: z.array(z.string()).default([]),
  })
})

const postsCollection = defineCollection({
  type: 'content',
  schema: z.object({
    title: z.string(),
    description: z.string(),
    slug: z.string().optional(),
    author: z.string(),
    date: z.date(),
    publishDate: z.date(),
    draft: z.boolean().default(false),
    tags: z.array(z.string()).default([]),
    image: z.object({
      src: z.string(),
      alt: z.string(),
    }).optional(),
    category: z.string().default('general'),
  })
})

export const collections = {
  'docs': docsCollection,
  'posts': postsCollection,
}
```

## 🔄 Content Migration Strategy

### 1. Directory Structure Migration
```
OLD (Gatsby):
src/content/
├── docs/
│   ├── overview.mdx
│   ├── amenities.mdx
│   └── ...
└── posts/
    └── leadership-retreats.mdx

NEW (Astro):
src/content/
├── docs/
│   ├── overview.md
│   ├── amenities.md
│   └── ...
└── posts/
    └── leadership-retreats.md
```

### 2. Frontmatter Migration
```markdown
<!-- OLD Gatsby MDX format -->
---
title: Overview
description: Looking for a vacation rental...
slug: /overview/
author: Chris McClease
date: 2023-03-20
order: 1
---

<!-- NEW Astro Content Collection format -->
---
title: Overview
description: Looking for a vacation rental...
author: Chris McClease
date: 2023-03-20T00:00:00.000Z
order: 1
slug: overview
draft: false
tags: ['amenities', 'overview']
---
```

### 3. MDX Component Migration
```astro
---
// src/components/mdx/CalloutBox.astro
export interface Props {
  type?: 'info' | 'warning' | 'success'
  title?: string
}

const { type = 'info', title } = Astro.props

const typeClasses = {
  info: 'bg-blue-50 border-blue-200 text-blue-800',
  warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',
  success: 'bg-green-50 border-green-200 text-green-800'
}
---

<div class={`p-4 rounded-lg border-l-4 ${typeClasses[type]} my-6`}>
  {title && <h4 class="font-bold mb-2">{title}</h4>}
  <slot />
</div>
```

## 🔧 Dynamic Route Generation

### 1. Documentation Pages
```astro
---
// src/pages/docs/[...slug].astro
import { getCollection, getEntry } from 'astro:content'
import BaseLayout from '../../layouts/BaseLayout.astro'
import { Image } from 'astro:assets'

export async function getStaticPaths() {
  const docs = await getCollection('docs', ({ data }) => {
    return data.draft !== true
  })
  
  return docs.map((doc) => ({
    params: { slug: doc.slug },
    props: { doc }
  }))
}

const { doc } = Astro.props
const { Content, headings } = await doc.render()

// Sort docs by order for navigation
const allDocs = await getCollection('docs')
const sortedDocs = allDocs
  .filter(d => !d.data.draft)
  .sort((a, b) => a.data.order - b.data.order)

const currentIndex = sortedDocs.findIndex(d => d.slug === doc.slug)
const prevDoc = currentIndex > 0 ? sortedDocs[currentIndex - 1] : null
const nextDoc = currentIndex < sortedDocs.length - 1 ? sortedDocs[currentIndex + 1] : null
---

<BaseLayout 
  title={doc.data.title}
  description={doc.data.description}
>
  <article class="prose lg:prose-xl mx-auto">
    <!-- Table of Contents -->
    {headings.length > 0 && (
      <nav class="toc bg-gray-50 p-4 rounded-lg mb-8">
        <h3 class="text-lg font-bold mb-4">Table of Contents</h3>
        <ul class="space-y-2">
          {headings.map((heading) => (
            <li style={`margin-left: ${(heading.depth - 1) * 1}rem`}>
              <a 
                href={`#${heading.slug}`}
                class="text-secondary hover:text-tertiary"
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    )}

    <!-- Document Content -->
    <header class="mb-8">
      <h1 class="text-4xl font-bold text-secondary mb-4">{doc.data.title}</h1>
      <div class="text-gray-600 mb-4">
        By {doc.data.author} • 
        <time datetime={doc.data.date.toISOString()}>
          {doc.data.date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
      </div>
    </header>

    <Content />

    <!-- Navigation -->
    <nav class="flex justify-between items-center mt-12 pt-8 border-t">
      {prevDoc ? (
        <a 
          href={`/docs/${prevDoc.slug}/`}
          class="flex items-center text-secondary hover:text-tertiary"
        >
          ← {prevDoc.data.title}
        </a>
      ) : <div></div>}
      
      {nextDoc ? (
        <a 
          href={`/docs/${nextDoc.slug}/`}
          class="flex items-center text-secondary hover:text-tertiary"
        >
          {nextDoc.data.title} →
        </a>
      ) : <div></div>}
    </nav>
  </article>
</BaseLayout>
```

### 2. Blog Posts
```astro
---
// src/pages/posts/[...slug].astro
import { getCollection, getEntry } from 'astro:content'
import BaseLayout from '../../layouts/BaseLayout.astro'
import { Image } from 'astro:assets'

export async function getStaticPaths() {
  const posts = await getCollection('posts', ({ data }) => {
    return data.draft !== true
  })
  
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post }
  }))
}

const { post } = Astro.props
const { Content } = await post.render()

// Get related posts
const allPosts = await getCollection('posts')
const relatedPosts = allPosts
  .filter(p => 
    p.slug !== post.slug && 
    !p.data.draft &&
    p.data.tags.some(tag => post.data.tags.includes(tag))
  )
  .slice(0, 3)
---

<BaseLayout 
  title={post.data.title}
  description={post.data.description}
>
  <article class="prose lg:prose-xl mx-auto">
    <header class="mb-8">
      {post.data.image && (
        <Image 
          src={post.data.image.src}
          alt={post.data.image.alt}
          width={800}
          height={400}
          class="rounded-lg shadow-lg mb-6"
        />
      )}
      
      <h1 class="text-4xl font-bold text-secondary mb-4">{post.data.title}</h1>
      
      <div class="flex items-center text-gray-600 mb-4">
        <span>By {post.data.author}</span>
        <span class="mx-2">•</span>
        <time datetime={post.data.date.toISOString()}>
          {post.data.date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
        <span class="mx-2">•</span>
        <span class="bg-secondary text-white px-2 py-1 rounded text-sm">
          {post.data.category}
        </span>
      </div>
      
      {post.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-6">
          {post.data.tags.map((tag) => (
            <span class="bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-sm">
              #{tag}
            </span>
          ))}
        </div>
      )}
    </header>

    <Content />

    {relatedPosts.length > 0 && (
      <aside class="mt-12 pt-8 border-t">
        <h3 class="text-2xl font-bold mb-6">Related Posts</h3>
        <div class="grid md:grid-cols-3 gap-6">
          {relatedPosts.map((relatedPost) => (
            <a 
              href={`/posts/${relatedPost.slug}/`}
              class="block bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow"
            >
              <div class="p-4">
                <h4 class="font-bold text-secondary mb-2">
                  {relatedPost.data.title}
                </h4>
                <p class="text-gray-600 text-sm">
                  {relatedPost.data.description}
                </p>
              </div>
            </a>
          ))}
        </div>
      </aside>
    )}
  </article>
</BaseLayout>
```

## 📋 Collection Listing Pages

### 1. Docs Index
```astro
---
// src/pages/docs/index.astro
import { getCollection } from 'astro:content'
import BaseLayout from '../../layouts/BaseLayout.astro'

const docs = await getCollection('docs', ({ data }) => {
  return data.draft !== true
})

const sortedDocs = docs.sort((a, b) => a.data.order - b.data.order)
---

<BaseLayout 
  title="Casa Patron Documentation"
  description="Complete guide to Casa Patron amenities and house rules"
>
  <div class="max-w-4xl mx-auto">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-bold text-secondary mb-4">Documentation</h1>
      <p class="text-xl text-gray-600">
        Everything you need to know about your stay at Casa Patron
      </p>
    </header>

    <div class="grid md:grid-cols-2 gap-6">
      {sortedDocs.map((doc) => (
        <a 
          href={`/docs/${doc.slug}/`}
          class="block bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-6"
        >
          <h2 class="text-xl font-bold text-secondary mb-3">
            {doc.data.title}
          </h2>
          <p class="text-gray-600 mb-4">
            {doc.data.description}
          </p>
          <div class="text-sm text-gray-500">
            Updated {doc.data.date.toLocaleDateString()}
          </div>
        </a>
      ))}
    </div>
  </div>
</BaseLayout>
```

## 🔍 Content Utilities

### Search and Filtering
```astro
---
// src/components/ContentSearch.astro (if needed as React island)
// For now, implement as static filtering
export interface Props {
  items: any[]
  type: 'docs' | 'posts'
}

const { items, type } = Astro.props
---

<div class="content-grid">
  {items.map((item) => (
    <div class="content-card">
      <h3>{item.data.title}</h3>
      <p>{item.data.description}</p>
      <a href={`/${type}/${item.slug}/`}>Read more</a>
    </div>
  ))}
</div>
```

## ✅ Migration Checklist

### Content Setup
- [ ] Create `src/content/config.ts` with proper schemas
- [ ] Migrate all MDX files to MD format
- [ ] Update frontmatter to match schema
- [ ] Test content collection queries
- [ ] Verify dynamic route generation

### Feature Parity
- [ ] Table of contents generation
- [ ] Navigation between docs
- [ ] Related content suggestions
- [ ] Search functionality (if needed)
- [ ] Tag filtering
- [ ] Content validation

### SEO & Performance
- [ ] Proper meta tags for all content
- [ ] Schema markup for articles
- [ ] Image optimization in content
- [ ] Fast page loading
- [ ] Sitemap generation includes all content